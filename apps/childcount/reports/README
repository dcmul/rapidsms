=========================
== ChildCount+ Reports ==
=========================

25 November 2010

|| Requirements ||

You must be running djcelery and rabbitmq...
In ChildCount terms, that means that your server
should be at "Stage E"

|| Intro ||

This describes the ChildCount+ reports framework.
The purpose of the framework is to make it quick
and easy to add new reports to a ChildCount+ 
installation though it's still not as quick and
easy as it might be.

There are two types of reports:
1) Nightly reports -- generated every night at midnight
   using a Celery task.  You DO NOT need to create a 
   task yourself, this is handled by the reports
   framework.
2) On-demand reports -- generated when a user visits
   the URL for that report.  You DO NOT need to 
   create a urls.py entry or a view for your report.
   That is handled by the reports framework.

The code for creating either type of report is the
same so that it's easy to change a report from one
type to another.


|| Installing Reports ||

For starters, you need to add two Configurations
to your ChildCount+ database with keys:
"ondemand_reports" and "nightly_reports" (no quotes)

Each of these should contains a whitespace-separated
list of modules that are in the folder:
    apps/childcount/reports/definitions/

For example if you have a nightly report in a file
called DeathAudit.py, you would put that
file in:
    apps/childcount/reports/definitions/DeathAudit.py
and add "DeathAudit" to the value of the
Configuration entry that has key "nightly_reports."


|| Creating Reports ||

To create a new report you must follow these steps:
1) Create a file called YourReportName.py in the
      apps/childcount/reports/definitions/
   directory.
2) In YourReportName.py, create a class called Report
   that inherits from:
      childcount.report_framework.PrintedReport
3) Define the following mebers in your Report class:
      - title (the title of your report)
      - filename (the basename of your report filename,
        WITHOUT an extension, e.g., "patient_list")
      - formats (an array of file format strings that
        your Report class can generate, e.g., ['pdf','xls'])
4) Define your Report.generate() method:
      generate(self, rformat, title, filepath, data)
   The arguments are:
      rformat: the report format string (e.g., 'pdf')
      title: a string representing the title of this
         report (e.g., "Patient List: Ruhiira")
      filepath: an absolute path to the file where your
         report should be saved
      data: a dictionary of extra data used to generate
         report variants (see 'Advanced' below)
   See the 'Debugging' section below for tips on how to
   debug reports as you're writing them.
5) Add the name of your report to the childcount.Configuration
   model, either under the key "nightly_reports" or
   "ondemand_reports" depending on when you want your
   reports to be generated.
6) Run the command "sudo service celeryd restart" on your server.
7) That's it.


|| Debugging ||

Writing reports can be complicated by the fact that they're
generated as tasks, rather than simple Django functions.
Here's how I would develop a nightly PDF report called TestReport
with filename test_report:

1) Create a first draft of TestReport.py
2) Open up the rapidsms shell and try running:
      from childcount.reports.nightly.TestReport import Report
      r = Report().apply()
      r.wait()
3) Check to see that your report is in:
      apps/childcount/reports/nightly/test_report.pdf
4) If not, run this command:
      r.traceback
   to get the traceback generated by any exceptions
   raised.
5) GO back and edit TestReport.py and repeat...



|| Advanced ||

Sometimes you need to generate the same report
using many different sets of data.  For example,
you might have a Patient List report that you
need to generate for every clinic.

You can use the Report.variants member to achieve
this sort of thing.  Report.variants should be
a list of tuples:
    (title_suffix, filename_suffix, extra_data)

If the report title were 'PatientList', then
title_suffix might be ': Ruhiira' for the Ruhiira
clinic, and filename_suffix might be '_RH'.
The dictionary extra_data might be:
   {'clinic_id': 13}
if Ruhiira clinic has ID 13.

Report.generate is called once per tuple, and
each time, the title, filepath, and data arguments
will change depending on the report variant
to be generated.


