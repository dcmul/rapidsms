=========================
== ChildCount+ Reports ==
=========================

25 November 2010

|| Intro ||

This describes the ChildCount+ reports framework.
The purpose of the framework is to make it quick
and easy to add new reports to a ChildCount+ 
installation though it's still not as quick and
easy as it might be.

There are two types of reports:
1) Nightly reports -- generated every night at midnight
   using a Celery task.  You DO NOT need to create a 
   task yourself, this is handled by the reports
   framework.
2) On-demand reports -- generated when a user visits
   the URL for that report.  You DO NOT need to 
   create a urls.py entry or a view for your report.
   That is handled by the reports framework.

The code for creating either type of report is the
same so that it's easy to change a report from one
type to another.


|| Todo ||

- i18n on all reports
- transition last reports to the framework


|| Installing Reports ||

For starters, you need to add two Configurations
to your ChildCount+ database with keys:
"ondemand_reports" and "nightly_reports" (no quotes)

Each of these should contains a whitespace-separated
list of modules that are in the folders:
    apps/childcount/reports/ondemand
        * and *
    apps/childcount/reports/nightly

For example if you have a nightly report in a file
called DeathAuditReport.py, you would put that
file in:
    apps/childcount/reports/nightly/DeathAuditReport.py
and add "DeathAuditReport" to the value of the
Configuration entry that has key "nightly_reports."


|| Creating Reports ||

To create a new report you must follow these steps:
1) Create a file called YourReportName.py in either the
      apps/childcount/reports/nightly/
          * or *
      apps/childcount/reports/ondemand/
   directories.
2) In YourReportName.py, create a class called Report
   that inherits from:
      childcount.report_framework.PrintedReport
3) Define the following mebers in your Report class:
      - title (the title of your report)
      - filename (the basename of your report filename,
        WITHOUT an extension)
      - formats (an array of file format strings that
        your Report class can generate, e.g., ['pdf','xls'])
4) Define your Report.generate() method.  Generate
   takes a report format in a string (e.g., 'pdf'),
   and some keyword arguments (optional) that are used 
   to generate many different reports with a similar
   format from the same Report class.

   Report.generate() should generate the report file
   and save it in the location specified by:
      Report.get_filepath()
5) Add the name of your report to the childcount.Configuration
   model, either under the key "nightly_reports" or
   "ondemand_reports" depending on where your report
   is saved.
6) That's it.


|| Advanced ||

Sometimes you need to generate the same report
using many different sets of data.  For example,
you might have a Patient List report that you
need to generate for every clinic.

You can use the Report.variants member to achieve
this sort of thing.  Report.variants should be
a list of tuples:
    (title_suffix, filename_suffix, extra_data)

If the report title were 'PatientList', then
title_suffix might be ': Ruhiira' for the Ruhiira
clinic, and filename_suffix might be '_RH'.
The dictionary extra_data might be:
   {'clinic_id': 13}
if Ruhiira clinic has ID 13.

Report.generate is called once per tuple, and
each time, the keyword argument 'var_index' is
passed to the method.  The argument 'var_index' 
is an index into the Reports.variants list.
Using 'var_index', the generate method can
figure out which report variant is to be generated
during that call of the method.






